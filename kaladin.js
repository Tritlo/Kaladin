/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var kaladin = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"kaladin":3,"program":4,"EOF":5,"functions":6,"function":7,";":8,"DEF":9,"NAME":10,"(":11,"optnames":12,")":13,"{":14,"optdecls":15,"optexprs":16,"}":17,"names":18,",":19,"args":20,"expr":21,"optargs":22,"body":23,"decl":24,"VAR":25,"=":26,"decls":27,"ifrest":28,"ELSE":29,"ELSEIF":30,"ifst":31,"IF":32,"whilest":33,"WHILE":34,"+":35,"-":36,"*":37,"/":38,"^":39,"<=":40,">=":41,"<":42,">":43,"==":44,"++":45,"AND":46,"OR":47,"NOT":48,"RETURN":49,"NONE":50,"STRING":51,"NUMBER":52,"TRUE":53,"FALSE":54,"exprs":55,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",9:"DEF",10:"NAME",11:"(",13:")",14:"{",17:"}",19:",",25:"VAR",26:"=",29:"ELSE",30:"ELSEIF",32:"IF",34:"WHILE",35:"+",36:"-",37:"*",38:"/",39:"^",40:"<=",41:">=",42:"<",43:">",44:"==",45:"++",46:"AND",47:"OR",48:"NOT",49:"RETURN",50:"NONE",51:"STRING",52:"NUMBER",53:"TRUE",54:"FALSE"},
productions_: [0,[3,2],[4,1],[6,3],[6,2],[7,9],[18,3],[18,1],[12,0],[12,1],[20,3],[20,1],[22,0],[22,1],[23,3],[24,4],[15,0],[15,1],[27,3],[27,2],[28,0],[28,2],[28,6],[31,6],[33,5],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,4],[21,3],[21,3],[21,2],[21,3],[21,1],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,3],[21,1],[21,1],[55,3],[55,2],[16,0],[16,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: postparse();
break;
case 5:
 var funname = $$[$0-7];
 var funargs = $$[$0-5];
 var decls = $$[$0-2];
 var exprs = $$[$0-1];
 fun = {
    args: funargs,
    decls: decls,
    exprs: exprs
 }; 
 functions[funname] = fun


break;
case 6:$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 7:this.$ = [$$[$0]]
break;
case 8:this.$ = []
break;
case 10:$$[$0-2].push($$[$0]); this.$ =$$[$0-2];
break;
case 11:this.$ = [$$[$0]]
break;
case 12:this.$ = []
break;
case 14: this.$ = {"exprs": $$[$0-1]}
break;
case 15: this.$ = {"name": $$[$0-2], "expr" : $$[$0]}
break;
case 16: this.$ = [] 
break;
case 18:$$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 19:this.$ = [$$[$0-1]] 
break;
case 20: this.$ = null 
break;
case 21: this.$ = { "type": "ELSE", "body" : $$[$0], "rest": null}
break;
case 22: this.$ = { "type": "ELSEIF", "cond": $$[$0-3], "body" : $$[$0-1], "rest": $$[$0]} 
break;
case 23: 
this.$ = {"type": "IF", "cond": $$[$0-3], "body": $$[$0-1], "rest": $$[$0]} 

break;
case 24: 
this.$ = {"type": "WHILE", "cond": $$[$0-2], "body": $$[$0]};

break;
case 25: this.$ = {OP: "+", "type": "OP","subexprs": [$$[$0-2],$$[$0]]}
break;
case 26: this.$ = {OP: "-", "type": "OP","subexprs": [$$[$0-2],$$[$0]]}
break;
case 27: this.$ = {OP: "*", "type": "OP","subexprs": [$$[$0-2],$$[$0]]}
break;
case 28: this.$ = {OP: "/", "type": "OP","subexprs": [$$[$0-2],$$[$0]]}
break;
case 29: this.$ = {OP: "^", "type": "OP","subexprs": [$$[$0-2],$$[$0]]}
break;
case 30: this.$ = {OP: "-", "type":"OP", "subexprs": [$$[$0]]}
break;
case 31: this.$ = {OP: "<=", "type": "OP","subexprs": [$$[$0-2],$$[$0]]}
break;
case 32: this.$ = {OP: ">=", "type": "OP","subexprs": [$$[$0-2],$$[$0]]}
break;
case 33: this.$ = {OP: "<",  "type": "OP","subexprs": [$$[$0-2],$$[$0]]}
break;
case 34: this.$ = {OP: ">",  "type": "OP","subexprs": [$$[$0-2],$$[$0]]}
break;
case 35: this.$ = {OP: "==", "type": "OP","subexprs": [$$[$0-2],$$[$0]]}
break;
case 36: this.$ = {OP: "++", "type": "OP","subexprs": [$$[$0-2],$$[$0]]}
break;
case 37: this.$ = {OP: $$[$0-3], "type": "OP", "subexprs": $$[$0-1]}
break;
case 38: this.$ = {type: "AND", "subexprs": [$$[$0-2],$$[$0]]}
break;
case 39: this.$ = {type: "OR", "subexprs": [$$[$0-2],$$[$0]]}
break;
case 40: this.$ = {type: "NOT", "val": $$[$0]}
break;
case 41: this.$ = {type: "STORE", name: $$[$0-2], val: $$[$0] }
break;
case 42: this.$ = {type: "NAME", "name": $$[$0]}
break;
case 43: this.$ = {type: "RETURN", "val": $$[$0]}
break;
case 44: this.$ = {type: "LITERAL", "val": "null"}
break;
case 45: this.$ = {type: "LITERAL", "val": $$[$0]}
break;
case 46: this.$ = {type: "LITERAL", "val": $$[$0]}
break;
case 47: this.$ = {type: "LITERAL", "val": $$[$0]}
break;
case 48: this.$ = {type: "LITERAL", "val": $$[$0]}
break;
case 49: this.$ = {type: "()", "val": $$[$0-1]}
break;
case 52:$$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 53: this.$ = [$$[$0-1]] 
break;
case 54: this.$ = [] 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:[1,5]},{1:[3]},{5:[1,6]},{5:[2,2],7:7,9:[1,5]},{8:[1,8]},{10:[1,9]},{1:[2,1]},{8:[1,10]},{5:[2,4],9:[2,4]},{11:[1,11]},{5:[2,3],9:[2,3]},{10:[1,14],12:12,13:[2,8],18:13},{13:[1,15]},{13:[2,9],19:[1,16]},{13:[2,7],19:[2,7]},{14:[1,17]},{10:[1,18]},{10:[2,16],11:[2,16],15:19,17:[2,16],24:21,25:[1,22],27:20,32:[2,16],34:[2,16],36:[2,16],48:[2,16],49:[2,16],50:[2,16],51:[2,16],52:[2,16],53:[2,16],54:[2,16]},{13:[2,6],19:[2,6]},{10:[1,27],11:[1,35],16:23,17:[2,54],21:25,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34],55:24},{10:[2,17],11:[2,17],17:[2,17],24:40,25:[1,22],32:[2,17],34:[2,17],36:[2,17],48:[2,17],49:[2,17],50:[2,17],51:[2,17],52:[2,17],53:[2,17],54:[2,17]},{8:[1,41]},{10:[1,42]},{17:[1,43]},{10:[1,27],11:[1,35],17:[2,55],21:44,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{8:[1,45],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58]},{10:[1,27],11:[1,35],21:59,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{8:[2,42],11:[1,60],13:[2,42],19:[2,42],26:[1,61],35:[2,42],36:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[2,42],42:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42]},{10:[1,27],11:[1,35],21:62,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:63,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{8:[2,44],13:[2,44],19:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],42:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44]},{8:[2,45],13:[2,45],19:[2,45],35:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],41:[2,45],42:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45]},{8:[2,46],13:[2,46],19:[2,46],35:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],42:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46]},{8:[2,47],13:[2,47],19:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],42:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47]},{8:[2,48],13:[2,48],19:[2,48],35:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],42:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48]},{10:[1,27],11:[1,35],21:64,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{8:[2,50],13:[2,50],19:[2,50],35:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],42:[2,50],43:[2,50],44:[2,50],45:[2,50],46:[2,50],47:[2,50]},{8:[2,51],13:[2,51],19:[2,51],35:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],42:[2,51],43:[2,51],44:[2,51],45:[2,51],46:[2,51],47:[2,51]},{11:[1,65]},{11:[1,66]},{8:[1,67]},{10:[2,19],11:[2,19],17:[2,19],25:[2,19],32:[2,19],34:[2,19],36:[2,19],48:[2,19],49:[2,19],50:[2,19],51:[2,19],52:[2,19],53:[2,19],54:[2,19]},{26:[1,68]},{8:[2,5]},{8:[1,69],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58]},{10:[2,53],11:[2,53],17:[2,53],32:[2,53],34:[2,53],36:[2,53],48:[2,53],49:[2,53],50:[2,53],51:[2,53],52:[2,53],53:[2,53],54:[2,53]},{10:[1,27],11:[1,35],21:70,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:71,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:72,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:73,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:74,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:75,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:76,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:77,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:78,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:79,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:80,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:81,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:82,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{8:[2,30],13:[2,30],19:[2,30],35:[2,30],36:[2,30],37:[2,30],38:[2,30],39:[2,30],40:[2,30],41:[2,30],42:[2,30],43:[2,30],44:[2,30],45:[2,30],46:[2,30],47:[2,30]},{10:[1,27],11:[1,35],13:[2,12],20:84,21:85,22:83,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:86,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{8:[2,40],13:[2,40],19:[2,40],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58]},{8:[2,43],13:[2,43],19:[2,43],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58]},{13:[1,87],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58]},{10:[1,27],11:[1,35],21:88,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[1,27],11:[1,35],21:89,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[2,18],11:[2,18],17:[2,18],25:[2,18],32:[2,18],34:[2,18],36:[2,18],48:[2,18],49:[2,18],50:[2,18],51:[2,18],52:[2,18],53:[2,18],54:[2,18]},{10:[1,27],11:[1,35],21:90,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{10:[2,52],11:[2,52],17:[2,52],32:[2,52],34:[2,52],36:[2,52],48:[2,52],49:[2,52],50:[2,52],51:[2,52],52:[2,52],53:[2,52],54:[2,52]},{8:[2,25],13:[2,25],19:[2,25],35:[2,25],36:[2,25],37:[1,48],38:[1,49],39:[1,50],40:[2,25],41:[2,25],42:[2,25],43:[2,25],44:[2,25],45:[2,25],46:[2,25],47:[2,25]},{8:[2,26],13:[2,26],19:[2,26],35:[2,26],36:[2,26],37:[1,48],38:[1,49],39:[1,50],40:[2,26],41:[2,26],42:[2,26],43:[2,26],44:[2,26],45:[2,26],46:[2,26],47:[2,26]},{8:[2,27],13:[2,27],19:[2,27],35:[2,27],36:[2,27],37:[2,27],38:[2,27],39:[1,50],40:[2,27],41:[2,27],42:[2,27],43:[2,27],44:[2,27],45:[2,27],46:[2,27],47:[2,27]},{8:[2,28],13:[2,28],19:[2,28],35:[2,28],36:[2,28],37:[2,28],38:[2,28],39:[1,50],40:[2,28],41:[2,28],42:[2,28],43:[2,28],44:[2,28],45:[2,28],46:[2,28],47:[2,28]},{8:[2,29],13:[2,29],19:[2,29],35:[2,29],36:[2,29],37:[2,29],38:[2,29],39:[2,29],40:[2,29],41:[2,29],42:[2,29],43:[2,29],44:[2,29],45:[2,29],46:[2,29],47:[2,29]},{8:[2,31],13:[2,31],19:[2,31],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[2,31],41:[2,31],42:[2,31],43:[2,31],44:[2,31],45:[1,56],46:[2,31],47:[2,31]},{8:[2,32],13:[2,32],19:[2,32],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[2,32],41:[2,32],42:[2,32],43:[2,32],44:[2,32],45:[1,56],46:[2,32],47:[2,32]},{8:[2,33],13:[2,33],19:[2,33],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[2,33],41:[2,33],42:[2,33],43:[2,33],44:[2,33],45:[1,56],46:[2,33],47:[2,33]},{8:[2,34],13:[2,34],19:[2,34],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[2,34],41:[2,34],42:[2,34],43:[2,34],44:[2,34],45:[1,56],46:[2,34],47:[2,34]},{8:[2,35],13:[2,35],19:[2,35],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[2,35],41:[2,35],42:[2,35],43:[2,35],44:[2,35],45:[1,56],46:[2,35],47:[2,35]},{8:[2,36],13:[2,36],19:[2,36],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[2,36],41:[2,36],42:[2,36],43:[2,36],44:[2,36],45:[2,36],46:[2,36],47:[2,36]},{8:[2,38],13:[2,38],19:[2,38],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[2,38],47:[2,38]},{8:[2,39],13:[2,39],19:[2,39],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[2,39]},{13:[1,91]},{13:[2,13],19:[1,92]},{13:[2,11],19:[2,11],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58]},{8:[2,41],13:[2,41],19:[2,41],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[2,41],41:[2,41],42:[2,41],43:[2,41],44:[2,41],45:[1,56],46:[2,41],47:[2,41]},{8:[2,49],13:[2,49],19:[2,49],35:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49]},{13:[1,93],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58]},{13:[1,94],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58]},{8:[2,15],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58]},{8:[2,37],13:[2,37],19:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[2,37],45:[2,37],46:[2,37],47:[2,37]},{10:[1,27],11:[1,35],21:95,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{14:[1,97],23:96},{14:[1,97],23:98},{13:[2,10],19:[2,10],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58]},{8:[2,20],13:[2,20],19:[2,20],28:99,29:[1,100],30:[1,101],35:[2,20],36:[2,20],37:[2,20],38:[2,20],39:[2,20],40:[2,20],41:[2,20],42:[2,20],43:[2,20],44:[2,20],45:[2,20],46:[2,20],47:[2,20]},{10:[1,27],11:[1,35],16:102,17:[2,54],21:25,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34],55:24},{8:[2,24],13:[2,24],19:[2,24],35:[2,24],36:[2,24],37:[2,24],38:[2,24],39:[2,24],40:[2,24],41:[2,24],42:[2,24],43:[2,24],44:[2,24],45:[2,24],46:[2,24],47:[2,24]},{8:[2,23],13:[2,23],19:[2,23],35:[2,23],36:[2,23],37:[2,23],38:[2,23],39:[2,23],40:[2,23],41:[2,23],42:[2,23],43:[2,23],44:[2,23],45:[2,23],46:[2,23],47:[2,23]},{14:[1,97],23:103},{11:[1,104]},{17:[1,105]},{8:[2,21],13:[2,21],19:[2,21],35:[2,21],36:[2,21],37:[2,21],38:[2,21],39:[2,21],40:[2,21],41:[2,21],42:[2,21],43:[2,21],44:[2,21],45:[2,21],46:[2,21],47:[2,21]},{10:[1,27],11:[1,35],21:106,31:36,32:[1,38],33:37,34:[1,39],36:[1,26],48:[1,28],49:[1,29],50:[1,30],51:[1,31],52:[1,32],53:[1,33],54:[1,34]},{8:[2,14],13:[2,14],19:[2,14],29:[2,14],30:[2,14],35:[2,14],36:[2,14],37:[2,14],38:[2,14],39:[2,14],40:[2,14],41:[2,14],42:[2,14],43:[2,14],44:[2,14],45:[2,14],46:[2,14],47:[2,14]},{13:[1,107],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58]},{14:[1,97],23:108},{8:[2,20],13:[2,20],19:[2,20],28:109,29:[1,100],30:[1,101],35:[2,20],36:[2,20],37:[2,20],38:[2,20],39:[2,20],40:[2,20],41:[2,20],42:[2,20],43:[2,20],44:[2,20],45:[2,20],46:[2,20],47:[2,20]},{8:[2,22],13:[2,22],19:[2,22],35:[2,22],36:[2,22],37:[2,22],38:[2,22],39:[2,22],40:[2,22],41:[2,22],42:[2,22],43:[2,22],44:[2,22],45:[2,22],46:[2,22],47:[2,22]}],
defaultActions: {6:[2,1],43:[2,5]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var name = "initial"; 

if(this.process !== undefined){
  var emit = console.log;
  var debug =  console.log; 
  name =  this.process.argv[2].split(".")[0];
} else {
  console.log(emit);
  emit = window.emit || console.log;
  debug = window.debug || console.log;
}
var functions = {};

var postparse = function(){
  //console.log("parsing complete");
  createProgram();
}


function generateExpr(expr,exprtype){
  if(!exprtype) exprtype = "";
  var type = expr["type"];
  if(genExprType[type]) genExprType[type](expr,exprtype);
  else debug(type);
};

function generateBody(body,exprtype){
  if(!exprtype) exprtype = "";
  var exprs = body.exprs;
  for(var i = 0; i < exprs.length; i++){
    if(i == exprs.length -1) generateExpr(exprs[i],exprtype);
    else generateExpr(exprs[i]);
  };
};

var convTable = {};

genExprType = {
  "OP": function (expr,exprtype){
	    var op = expr["OP"]; 
	    var args = expr.subexprs;
	    for(var i = 0; i < args.length; i++){
	      if(i == 0) generateExpr(args[i],exprtype);
              else generateExpr(args[i],"P");
	    };
            if(exprtype !=="R"){ exprtype = "";}
	    emit('(Call'+exprtype+' #"'+op+'[f'+args.length+']" ' + args.length +')');
	},
  "NOT": function(expr,exprtype){
	    var args = expr.subexprs;
	    generateExpr(args[0]);
	    emit('(Not' +exprtype+')');
	},
  "LITERAL": function(expr,exprtype){
           if(convTable[expr.val]) expr.val = convTable[expr.val];
           emit("(MakeVal"+exprtype+" " + expr.val +")");
	},
  "NAME": function(expr,exprtype){
           var loc = nameTable[expr.name];
           emit("(Fetch"+exprtype+" " + loc +")");
	},
  "RETURN": function(expr,exprtype){
           generateExpr(expr.val,"");
           emit("(Return)");
	},
  "()": function(expr,exprtype){
           generateExpr(expr.val,"");
	},
  "STORE": function(expr,exprtype){
           generateExpr(expr.val,"");
           var loc = nameTable[expr.name];
           emit("(Store"+exprtype+" " + loc +")");
	},
  "AND": function(expr,exprtype){
         if(exprtype === "P") emit("(Push)");
         generateExpr(expr.subexprs[0],"");
         var labEnd = newLab();
         emit("(GoFalse _" + labEnd +")");
         generateExpr(expr.subexprs[1],"");
         emit("_" + labEnd +":");
         if(exprtype === "R") emit("(Return)");
      },
  "OR": function(expr,exprtype){
         if(exprtype === "P") emit("(Push)");
         generateExpr(expr.subexprs[0],"");
         var labEnd = newLab();
         emit("(GoTrue _" + labEnd +")");
         generateExpr(expr.subexprs[1],"");
         emit("_" + labEnd +":");
         if(exprtype === "P") emit("(Return)");
      },
  "IF": function(expr,exprtype){
         generateExpr(expr.cond,"");
         var labElse = newLab();
         var labEnd = newLab();
         var temp = expr.rest;
         if(temp){
	    emit("(GoFalse _" + labElse +")");
	    generateBody(expr.body,exprtype);
	    emit("(Go _" + labEnd +")");
         } else {
	    emit("(GoFalse _" + labEnd +")");
	    generateBody(expr.body,exprtype);
	 };
         while(temp){
             emit("_" + labElse +":");
	     if(temp.rest&& temp.rest.cond){
		 labElse = newLab();
		 generateExpr(temp.cond,"");
		 emit("(GoFalse _" + labElse +")");
	     };
             generateBody(temp.body,exprtype);
             emit("(Go _" + labEnd +")");
	     temp = temp.rest;
	 };
         emit("_" + labEnd +":");
	},

  "WHILE": function(expr,exprtype){
         if(exprtype === "P") emit("(Push)");
         var labStart = newLab();
         var labEnd = newLab();
         emit("_" + labStart +":");
         generateExpr(expr.cond,"");
         emit("(GoFalse _" + labEnd +")");
         generateBody(expr.body);//,exprtype);
         emit("(Go _" + labStart +")");
         emit("_" + labEnd +":");
         if(exprtype === "R") emit("(Return)");
      }
   };



var nameTable = {};
function generateDecl(decl){
 if(nameTable[decl.name] === undefined)
     nameTable[decl.name] = newLoc();
     emit("(Push)");

 var loc = nameTable[decl.name];
 generateExpr(decl.expr,"");
 emit("(Store " + loc +")");
};

var currentLab = 0;

function newLab(){
    return currentLab++;
};

function newLoc(){
    return namesInTable++;
};

function generateFunction(funcname, funcobj){
  //debug(funcobj);
  var args = funcobj.args;
  var decls = funcobj.decls;
  var exprs = funcobj.exprs;
  emit('#"'+funcname+'[f'+args.length+']" = ');
  emit("[");
  nameTable = {};
  namesInTable = 0;
  //emit("(MakeVal null)");
  //emit("(Push)");
  for(arg in args){
     var name =  args[arg];
     nameTable[name] = namesInTable++;
  };
  //We don't have closures, and no top level 
  //Variables.
  for(var i = 0; i < decls.length; i++){
      generateDecl(decls[i]);
  };
  for(var i = 0; i < exprs.length; i++){
    generateExpr(exprs[i]);
  };
  emit("(Return)");
  emit("];");
};

var createProgram = function (){
  emit('"'+name+'.mexe" = main in '); 
  emit('!{{'); 
  for(func in functions){
    //debug(func, functions[func]);
    generateFunction(func,functions[func]);
  }
  emit("}}*BASIS;");
};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return false;
break;
case 1:return false;
break;
case 2:return "DEF";
break;
case 3:return "WHILE";
break;
case 4:return "IF";
break;
case 5:return "ELSEIF";
break;
case 6:return "ELSE";
break;
case 7:return "AND";
break;
case 8:return "OR";
break;
case 9:return "NOT";
break;
case 10:return "TRUE";
break;
case 11:return "FALSE";
break;
case 12:return "RETURN";
break;
case 13:return "VAR";
break;
case 14:return "[";
break;
case 15:return "]";
break;
case 16:return "(";
break;
case 17:return ")";
break;
case 18:return "{";
break;
case 19:return "}";
break;
case 20:return "NONE";
break;
case 21:return "IN";
break;
case 22:return "IS";
break;
case 23:return "==";
break;
case 24:return "=";
break;
case 25:return 39;
break;
case 26:return 37;
break;
case 27:return 38;
break;
case 28:return 45;
break;
case 29:return 36;
break;
case 30:return 35;
break;
case 31:return ",";
break;
case 32:return ":";
break;
case 33:return ";";
break;
case 34:return "<=";
break;
case 35:return ">=";
break;
case 36:return "<";
break;
case 37:return ">";
break;
case 38:return "STRING";
break;
case 39:return "STRING";
break;
case 40:return "NUMBER";
break;
case 41:return "NAME";
break;
case 42:return 5;
break;
}
},
rules: [/^(?:^#.*)/,/^(?:\s)/,/^(?:def\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else if\b)/,/^(?:else\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:var\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:None\b)/,/^(?:in\b)/,/^(?:is\b)/,/^(?:==)/,/^(?:=)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:-)/,/^(?:\+)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:"[^\"]*")/,/^(?:'[^\']*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[A-Za-z]([A-Za-z0-9])*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = kaladin;
exports.Parser = kaladin.Parser;
exports.parse = function () { return kaladin.parse.apply(kaladin, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}