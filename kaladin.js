/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var kaladin = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"0":57,"1":56,"error":2,"expressions":3,"program":4,"EOF":5,"name":6,"i":7,"if":8,"I":9,"then":10,"T":11,"else":12,"E":13,"while":14,"W":15,"num":16,"n":17,"str":18,"s":19,"op":20,"*":21,"+":22,"-":23,"^":24,"/":25,"nil":26,"N":27,"function":28,"l":29,"exprdelim":30,"=":31,"funcdecl":32,"funcexpr":33,"{":34,"body":35,"}":36,"expr":37,"decl":38,";":39,"do":40,"ifwhile":41,"bool":42,"&":43,"|":44,"!":45,"cond":46,"(":47,")":48,"flowexpr":49,"names":50,"lit":51,",":52,"list":53,"[":54,"]":55,"funcappl":58,"$":59,"c":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"i",9:"I",11:"T",13:"E",15:"W",17:"n",19:"s",21:"*",22:"+",23:"-",24:"^",25:"/",27:"N",29:"l",31:"=",34:"{",36:"}",39:";",43:"&",44:"|",45:"!",47:"(",48:")",52:",",54:"[",55:"]",56:"1",57:"0",59:"$",60:"c"},
productions_: [0,[3,2],[6,1],[8,1],[10,1],[12,1],[14,1],[16,1],[18,1],[20,1],[20,1],[20,1],[20,1],[20,1],[26,1],[4,1],[4,2],[4,2],[4,1],[28,4],[28,3],[33,3],[32,1],[32,1],[38,3],[30,1],[30,1],[35,3],[35,2],[35,1],[35,3],[35,2],[40,1],[41,1],[41,1],[42,1],[42,1],[42,1],[46,1],[46,5],[46,4],[49,6],[50,1],[50,1],[50,3],[50,3],[53,2],[53,3],[51,1],[51,1],[51,1],[51,1],[51,1],[58,3],[37,1],[37,1],[37,1],[37,1],[37,1],[37,2],[37,3],[37,4],[37,5],[37,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:6,7:[1,8],28:3,29:[1,4],30:5,39:[1,7]},{1:[3]},{5:[1,9]},{4:10,5:[2,15],6:6,7:[1,8],28:3,29:[1,4],30:5,39:[1,7]},{4:11,5:[2,26],6:6,7:[1,8],28:3,29:[1,4],30:5,39:[1,7]},{5:[2,18]},{6:12,7:[1,8],31:[1,13]},{5:[2,25],7:[2,25],9:[2,25],15:[2,25],17:[2,25],19:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],27:[2,25],29:[2,25],34:[2,25],36:[2,25],47:[2,25],54:[2,25],56:[2,25],57:[2,25],59:[2,25]},{5:[2,2],7:[2,2],9:[2,2],11:[2,2],13:[2,2],15:[2,2],17:[2,2],19:[2,2],21:[2,2],22:[2,2],23:[2,2],24:[2,2],25:[2,2],27:[2,2],29:[2,2],31:[2,2],36:[2,2],39:[2,2],43:[2,2],44:[2,2],45:[2,2],47:[2,2],48:[2,2],52:[2,2],54:[2,2],55:[2,2],56:[2,2],57:[2,2],59:[2,2],60:[2,2]},{1:[2,1]},{5:[2,16]},{5:[2,17]},{31:[1,14]},{33:15,34:[1,16]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],32:17,33:18,34:[1,16],37:19,38:23,41:40,47:[1,26],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{5:[2,20],7:[2,20],29:[2,20],39:[2,20]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],29:[1,51],34:[1,50],35:48,37:49,38:23,41:40,47:[1,26],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{5:[2,19],7:[2,19],29:[2,19],39:[2,19]},{5:[2,22],7:[2,22],9:[2,22],11:[2,22],13:[2,22],15:[2,22],17:[2,22],19:[2,22],21:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],27:[2,22],29:[2,22],36:[2,22],39:[2,22],43:[2,22],44:[2,22],45:[2,22],47:[2,22],48:[2,22],54:[2,22],56:[2,22],57:[2,22],59:[2,22],60:[2,22]},{5:[2,23],7:[2,23],9:[2,23],11:[2,23],13:[2,23],15:[2,23],17:[2,23],19:[2,23],21:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],27:[2,23],29:[2,23],36:[2,23],39:[2,23],43:[2,23],44:[2,23],45:[2,23],47:[2,23],48:[2,23],54:[2,23],56:[2,23],57:[2,23],59:[2,23],60:[2,23]},{5:[2,54],7:[2,54],9:[2,54],11:[2,54],13:[2,54],15:[2,54],17:[2,54],19:[2,54],21:[2,54],22:[2,54],23:[2,54],24:[2,54],25:[2,54],27:[2,54],29:[2,54],31:[1,52],36:[2,54],39:[2,54],43:[2,54],44:[2,54],45:[2,54],47:[2,54],48:[2,54],54:[2,54],56:[2,54],57:[2,54],59:[2,54],60:[2,54]},{5:[2,55],7:[2,55],9:[2,55],11:[2,55],13:[2,55],15:[2,55],17:[2,55],19:[2,55],21:[2,55],22:[2,55],23:[2,55],24:[2,55],25:[2,55],27:[2,55],29:[2,55],36:[2,55],39:[2,55],43:[2,55],44:[2,55],45:[2,55],47:[2,55],48:[2,55],54:[2,55],56:[2,55],57:[2,55],59:[2,55],60:[2,55]},{5:[2,56],7:[2,56],9:[2,56],11:[2,56],13:[2,56],15:[2,56],17:[2,56],19:[2,56],21:[2,56],22:[2,56],23:[2,56],24:[2,56],25:[2,56],27:[2,56],29:[2,56],36:[2,56],39:[2,56],43:[2,56],44:[2,56],45:[2,56],47:[2,56],48:[2,56],54:[2,56],56:[2,56],57:[2,56],59:[2,56],60:[2,56]},{5:[2,57],7:[2,57],9:[2,57],11:[2,57],13:[2,57],15:[2,57],17:[2,57],19:[2,57],21:[2,57],22:[2,57],23:[2,57],24:[2,57],25:[2,57],27:[2,57],29:[2,57],36:[2,57],39:[2,57],43:[2,57],44:[2,57],45:[2,57],47:[2,57],48:[2,57],54:[2,57],56:[2,57],57:[2,57],59:[2,57],60:[2,57]},{5:[2,58],7:[2,58],9:[2,58],11:[2,58],13:[2,58],15:[2,58],17:[2,58],19:[2,58],21:[2,58],22:[2,58],23:[2,58],24:[2,58],25:[2,58],27:[2,58],29:[2,58],36:[2,58],39:[2,58],43:[2,58],44:[2,58],45:[2,58],47:[2,58],48:[2,58],54:[2,58],56:[2,58],57:[2,58],59:[2,58],60:[2,58]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],37:53,38:23,41:40,47:[1,26],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],37:54,38:23,41:40,47:[1,26],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{5:[2,63],7:[2,63],9:[2,63],11:[2,63],13:[2,63],15:[2,63],17:[2,63],19:[2,63],21:[2,63],22:[2,63],23:[2,63],24:[2,63],25:[2,63],27:[2,63],29:[2,63],36:[2,63],39:[2,63],43:[2,63],44:[2,63],45:[2,63],47:[2,63],48:[2,63],54:[2,63],56:[2,63],57:[2,63],59:[2,63],60:[2,63]},{5:[2,14],7:[2,14],9:[2,14],11:[2,14],13:[2,14],15:[2,14],17:[2,14],19:[2,14],21:[2,14],22:[2,14],23:[2,14],24:[2,14],25:[2,14],27:[2,14],29:[2,14],36:[2,14],39:[2,14],43:[2,14],44:[2,14],45:[2,14],47:[2,14],48:[2,14],54:[2,14],56:[2,14],57:[2,14],59:[2,14],60:[2,14]},{6:55,7:[1,8]},{5:[2,48],7:[2,48],9:[2,48],11:[2,48],13:[2,48],15:[2,48],17:[2,48],19:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],25:[2,48],27:[2,48],29:[2,48],36:[2,48],39:[2,48],43:[2,48],44:[2,48],45:[2,48],47:[2,48],48:[2,48],52:[2,48],54:[2,48],55:[2,48],56:[2,48],57:[2,48],59:[2,48],60:[2,48]},{5:[2,49],7:[2,49],9:[2,49],11:[2,49],13:[2,49],15:[2,49],17:[2,49],19:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],27:[2,49],29:[2,49],36:[2,49],39:[2,49],43:[2,49],44:[2,49],45:[2,49],47:[2,49],48:[2,49],52:[2,49],54:[2,49],55:[2,49],56:[2,49],57:[2,49],59:[2,49],60:[2,49]},{5:[2,50],7:[2,50],9:[2,50],11:[2,50],13:[2,50],15:[2,50],17:[2,50],19:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],27:[2,50],29:[2,50],36:[2,50],39:[2,50],43:[2,50],44:[2,50],45:[2,50],47:[2,50],48:[2,50],52:[2,50],54:[2,50],55:[2,50],56:[2,50],57:[2,50],59:[2,50],60:[2,50]},{5:[2,51],7:[2,51],9:[2,51],11:[2,51],13:[2,51],15:[2,51],17:[2,51],19:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],27:[2,51],29:[2,51],36:[2,51],39:[2,51],43:[2,51],44:[2,51],45:[2,51],47:[2,51],48:[2,51],52:[2,51],54:[2,51],55:[2,51],56:[2,51],57:[2,51],59:[2,51],60:[2,51]},{5:[2,52],7:[2,52],9:[2,52],11:[2,52],13:[2,52],15:[2,52],17:[2,52],19:[2,52],21:[2,52],22:[2,52],23:[2,52],24:[2,52],25:[2,52],27:[2,52],29:[2,52],36:[2,52],39:[2,52],43:[2,52],44:[2,52],45:[2,52],47:[2,52],48:[2,52],52:[2,52],54:[2,52],55:[2,52],56:[2,52],57:[2,52],59:[2,52],60:[2,52]},{7:[2,9],9:[2,9],15:[2,9],17:[2,9],19:[2,9],21:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],27:[2,9],47:[2,9],54:[2,9],56:[2,9],57:[2,9],59:[2,9]},{7:[2,10],9:[2,10],15:[2,10],17:[2,10],19:[2,10],21:[2,10],22:[2,10],23:[2,10],24:[2,10],25:[2,10],27:[2,10],47:[2,10],54:[2,10],56:[2,10],57:[2,10],59:[2,10]},{7:[2,11],9:[2,11],15:[2,11],17:[2,11],19:[2,11],21:[2,11],22:[2,11],23:[2,11],24:[2,11],25:[2,11],27:[2,11],47:[2,11],54:[2,11],56:[2,11],57:[2,11],59:[2,11]},{7:[2,12],9:[2,12],15:[2,12],17:[2,12],19:[2,12],21:[2,12],22:[2,12],23:[2,12],24:[2,12],25:[2,12],27:[2,12],47:[2,12],54:[2,12],56:[2,12],57:[2,12],59:[2,12]},{7:[2,13],9:[2,13],15:[2,13],17:[2,13],19:[2,13],21:[2,13],22:[2,13],23:[2,13],24:[2,13],25:[2,13],27:[2,13],47:[2,13],54:[2,13],56:[2,13],57:[2,13],59:[2,13]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],37:57,38:23,41:40,42:59,43:[1,60],44:[1,61],45:[1,62],46:56,47:[1,58],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{5:[2,7],7:[2,7],9:[2,7],11:[2,7],13:[2,7],15:[2,7],17:[2,7],19:[2,7],21:[2,7],22:[2,7],23:[2,7],24:[2,7],25:[2,7],27:[2,7],29:[2,7],36:[2,7],39:[2,7],43:[2,7],44:[2,7],45:[2,7],47:[2,7],48:[2,7],52:[2,7],54:[2,7],55:[2,7],56:[2,7],57:[2,7],59:[2,7],60:[2,7]},{5:[2,8],7:[2,8],9:[2,8],11:[2,8],13:[2,8],15:[2,8],17:[2,8],19:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],27:[2,8],29:[2,8],36:[2,8],39:[2,8],43:[2,8],44:[2,8],45:[2,8],47:[2,8],48:[2,8],52:[2,8],54:[2,8],55:[2,8],56:[2,8],57:[2,8],59:[2,8],60:[2,8]},{6:65,7:[1,8],16:30,17:[1,41],18:31,19:[1,42],50:64,51:66,53:32,54:[1,43],55:[1,63],56:[1,33],57:[1,34]},{7:[2,33],9:[2,33],15:[2,33],17:[2,33],19:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],25:[2,33],27:[2,33],43:[2,33],44:[2,33],45:[2,33],47:[2,33],54:[2,33],56:[2,33],57:[2,33],59:[2,33]},{7:[2,34],9:[2,34],15:[2,34],17:[2,34],19:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],25:[2,34],27:[2,34],43:[2,34],44:[2,34],45:[2,34],47:[2,34],54:[2,34],56:[2,34],57:[2,34],59:[2,34]},{7:[2,3],9:[2,3],15:[2,3],17:[2,3],19:[2,3],21:[2,3],22:[2,3],23:[2,3],24:[2,3],25:[2,3],27:[2,3],43:[2,3],44:[2,3],45:[2,3],47:[2,3],54:[2,3],56:[2,3],57:[2,3],59:[2,3]},{7:[2,6],9:[2,6],15:[2,6],17:[2,6],19:[2,6],21:[2,6],22:[2,6],23:[2,6],24:[2,6],25:[2,6],27:[2,6],43:[2,6],44:[2,6],45:[2,6],47:[2,6],54:[2,6],56:[2,6],57:[2,6],59:[2,6]},{36:[1,67]},{29:[1,69],30:68,36:[2,29],39:[1,7]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],29:[1,51],34:[1,50],35:70,37:49,38:23,41:40,47:[1,26],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],29:[1,51],34:[1,50],35:71,37:49,38:23,41:40,47:[1,26],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],37:72,38:23,41:40,47:[1,26],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{5:[2,59],7:[2,59],9:[2,59],11:[2,59],13:[2,59],15:[2,59],17:[2,59],19:[2,59],21:[2,59],22:[2,59],23:[2,59],24:[2,59],25:[2,59],27:[2,59],29:[2,59],36:[2,59],39:[2,59],43:[2,59],44:[2,59],45:[2,59],47:[2,59],48:[2,59],54:[2,59],56:[2,59],57:[2,59],59:[2,59],60:[2,59]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],37:74,38:23,41:40,47:[1,26],48:[1,73],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29],60:[1,75]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],37:76,38:23,41:40,47:[1,26],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{10:77,11:[1,78]},{11:[2,38],48:[2,38]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],37:80,38:23,41:40,42:59,43:[1,60],44:[1,61],45:[1,62],46:79,47:[1,58],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{47:[1,81]},{7:[2,35],9:[2,35],15:[2,35],17:[2,35],19:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],25:[2,35],27:[2,35],43:[2,35],44:[2,35],45:[2,35],47:[2,35],54:[2,35],56:[2,35],57:[2,35],59:[2,35]},{7:[2,36],9:[2,36],15:[2,36],17:[2,36],19:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],27:[2,36],43:[2,36],44:[2,36],45:[2,36],47:[2,36],54:[2,36],56:[2,36],57:[2,36],59:[2,36]},{7:[2,37],9:[2,37],15:[2,37],17:[2,37],19:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],27:[2,37],43:[2,37],44:[2,37],45:[2,37],47:[2,37],54:[2,37],56:[2,37],57:[2,37],59:[2,37]},{5:[2,46],7:[2,46],9:[2,46],11:[2,46],13:[2,46],15:[2,46],17:[2,46],19:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],27:[2,46],29:[2,46],36:[2,46],39:[2,46],43:[2,46],44:[2,46],45:[2,46],47:[2,46],48:[2,46],52:[2,46],54:[2,46],55:[2,46],56:[2,46],57:[2,46],59:[2,46],60:[2,46]},{55:[1,82]},{52:[1,83],55:[2,42]},{52:[1,84],55:[2,43]},{5:[2,21],7:[2,21],9:[2,21],11:[2,21],13:[2,21],15:[2,21],17:[2,21],19:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],27:[2,21],29:[2,21],36:[2,21],39:[2,21],43:[2,21],44:[2,21],45:[2,21],47:[2,21],48:[2,21],54:[2,21],56:[2,21],57:[2,21],59:[2,21],60:[2,21]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],29:[1,51],34:[1,50],35:85,36:[2,28],37:49,38:23,41:40,47:[1,26],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{7:[2,26],9:[2,26],15:[2,26],17:[2,26],19:[2,26],21:[2,26],22:[2,26],23:[2,26],24:[2,26],25:[2,26],27:[2,26],29:[2,26],34:[2,26],36:[2,26],47:[2,26],54:[2,26],56:[2,26],57:[2,26],59:[2,26]},{36:[1,86]},{36:[2,31]},{5:[2,24],7:[2,24],9:[2,24],11:[2,24],13:[2,24],15:[2,24],17:[2,24],19:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],27:[2,24],29:[2,24],36:[2,24],39:[2,24],43:[2,24],44:[2,24],45:[2,24],47:[2,24],48:[2,24],54:[2,24],56:[2,24],57:[2,24],59:[2,24],60:[2,24]},{5:[2,60],7:[2,60],9:[2,60],11:[2,60],13:[2,60],15:[2,60],17:[2,60],19:[2,60],21:[2,60],22:[2,60],23:[2,60],24:[2,60],25:[2,60],27:[2,60],29:[2,60],36:[2,60],39:[2,60],43:[2,60],44:[2,60],45:[2,60],47:[2,60],48:[2,60],54:[2,60],56:[2,60],57:[2,60],59:[2,60],60:[2,60]},{48:[1,87]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],37:88,38:23,41:40,47:[1,26],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{5:[2,53],7:[2,53],9:[2,53],11:[2,53],13:[2,53],15:[2,53],17:[2,53],19:[2,53],21:[2,53],22:[2,53],23:[2,53],24:[2,53],25:[2,53],27:[2,53],29:[2,53],36:[2,53],39:[2,53],43:[2,53],44:[2,53],45:[2,53],47:[2,53],48:[2,53],54:[2,53],56:[2,53],57:[2,53],59:[2,53],60:[2,53]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],32:90,33:18,34:[1,16],37:19,38:23,40:89,41:40,47:[1,26],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{7:[2,4],9:[2,4],15:[2,4],17:[2,4],19:[2,4],21:[2,4],22:[2,4],23:[2,4],24:[2,4],25:[2,4],27:[2,4],34:[2,4],47:[2,4],54:[2,4],56:[2,4],57:[2,4],59:[2,4]},{42:91,43:[1,60],44:[1,61],45:[1,62]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],37:74,38:23,41:40,43:[2,38],44:[2,38],45:[2,38],47:[1,26],48:[1,73],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29],60:[1,75]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],37:57,38:23,41:40,42:59,43:[1,60],44:[1,61],45:[1,62],46:92,47:[1,58],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{5:[2,47],7:[2,47],9:[2,47],11:[2,47],13:[2,47],15:[2,47],17:[2,47],19:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],25:[2,47],27:[2,47],29:[2,47],36:[2,47],39:[2,47],43:[2,47],44:[2,47],45:[2,47],47:[2,47],48:[2,47],52:[2,47],54:[2,47],55:[2,47],56:[2,47],57:[2,47],59:[2,47],60:[2,47]},{6:65,7:[1,8],16:30,17:[1,41],18:31,19:[1,42],50:93,51:66,53:32,54:[1,43],56:[1,33],57:[1,34]},{6:65,7:[1,8],16:30,17:[1,41],18:31,19:[1,42],50:94,51:66,53:32,54:[1,43],56:[1,33],57:[1,34]},{36:[2,27]},{36:[2,30]},{5:[2,61],7:[2,61],9:[2,61],11:[2,61],13:[2,61],15:[2,61],17:[2,61],19:[2,61],21:[2,61],22:[2,61],23:[2,61],24:[2,61],25:[2,61],27:[2,61],29:[2,61],36:[2,61],39:[2,61],43:[2,61],44:[2,61],45:[2,61],47:[2,61],48:[2,61],54:[2,61],56:[2,61],57:[2,61],59:[2,61],60:[2,61]},{48:[1,95]},{12:96,13:[1,97]},{5:[2,32],7:[2,32],9:[2,32],11:[2,32],13:[2,32],15:[2,32],17:[2,32],19:[2,32],21:[2,32],22:[2,32],23:[2,32],24:[2,32],25:[2,32],27:[2,32],29:[2,32],36:[2,32],39:[2,32],43:[2,32],44:[2,32],45:[2,32],47:[2,32],48:[2,32],54:[2,32],56:[2,32],57:[2,32],59:[2,32],60:[2,32]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],37:57,38:23,41:40,42:59,43:[1,60],44:[1,61],45:[1,62],46:98,47:[1,58],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{48:[1,99]},{55:[2,44]},{55:[2,45]},{5:[2,62],7:[2,62],9:[2,62],11:[2,62],13:[2,62],15:[2,62],17:[2,62],19:[2,62],21:[2,62],22:[2,62],23:[2,62],24:[2,62],25:[2,62],27:[2,62],29:[2,62],36:[2,62],39:[2,62],43:[2,62],44:[2,62],45:[2,62],47:[2,62],48:[2,62],54:[2,62],56:[2,62],57:[2,62],59:[2,62],60:[2,62]},{6:20,7:[1,8],8:44,9:[1,46],14:45,15:[1,47],16:30,17:[1,41],18:31,19:[1,42],20:25,21:[1,35],22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:21,27:[1,28],32:90,33:18,34:[1,16],37:19,38:23,40:100,41:40,47:[1,26],49:27,51:24,53:32,54:[1,43],56:[1,33],57:[1,34],58:22,59:[1,29]},{7:[2,5],9:[2,5],15:[2,5],17:[2,5],19:[2,5],21:[2,5],22:[2,5],23:[2,5],24:[2,5],25:[2,5],27:[2,5],34:[2,5],47:[2,5],54:[2,5],56:[2,5],57:[2,5],59:[2,5]},{48:[1,101]},{11:[2,40],43:[2,40],44:[2,40],45:[2,40],48:[2,40]},{5:[2,41],7:[2,41],9:[2,41],11:[2,41],13:[2,41],15:[2,41],17:[2,41],19:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],27:[2,41],29:[2,41],36:[2,41],39:[2,41],43:[2,41],44:[2,41],45:[2,41],47:[2,41],48:[2,41],54:[2,41],56:[2,41],57:[2,41],59:[2,41],60:[2,41]},{11:[2,39],43:[2,39],44:[2,39],45:[2,39],48:[2,39]}],
defaultActions: {5:[2,18],9:[2,1],10:[2,16],11:[2,17],71:[2,31],85:[2,27],86:[2,30],93:[2,44],94:[2,45]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return  false;
break;
case 1:return "l";
break;
case 2:return "t";
break;
case 3:return false;
break;
case 4:return "W";
break;
case 5:return "I";
break;
case 6:return "T";
break;
case 7:return "E";
break;
case 8:return "&";
break;
case 9:return "|";
break;
case 10:return "!";
break;
case 11:return "=";
break;
case 12:return "1";
break;
case 13:return "0";
break;
case 14:return "[";
break;
case 15:return "]";
break;
case 16:return "_";
break;
case 17:return "(";
break;
case 18:return ")";
break;
case 19:return "{";
break;
case 20:return "}";
break;
case 21:return "N";
break;
case 22:return "=";
break;
case 23:return 24;
break;
case 24:return 21;
break;
case 25:return 25;
break;
case 26:return 23;
break;
case 27:return 22;
break;
case 28:return "$";
break;
case 29:return ",";
break;
case 30:return ":";
break;
case 31:return ";";
break;
case 32:return "c";
break;
case 33:return "c";
break;
case 34:return "s";
break;
case 35:return "n";
break;
case 36:return "i";
break;
case 37:return 5;
break;
}
},
rules: [/^(?:^#.*)/,/^(?:\n)/,/^(?:\t)/,/^(?:\s)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:is\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\[)/,/^(?:\])/,/^(?:_\b)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:nil\b)/,/^(?:=)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\$)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:in\b)/,/^(?:[\<\>][\=]?)/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[A-Za-z]([A-Za-z0-9])*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = kaladin;
exports.Parser = kaladin.Parser;
exports.parse = function () { return kaladin.parse.apply(kaladin, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}