/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var kaladin = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"program":4,"EOF":5,"function":6,";":7,"DEF":8,"NAME":9,"(":10,"optnames":11,")":12,"body":13,"names":14,",":15,"args":16,"expr":17,"optargs":18,"{":19,"optdecls":20,"optexprs":21,"}":22,"decl":23,"VAR":24,"=":25,"decls":26,"ifrest":27,"ELSE":28,"ELSEIF":29,"ifst":30,"IF":31,"whilest":32,"WHILE":33,"whilerest":34,"operands":35,"operand":36,"commasepexprs":37,"optcommasepexprs":38,"list":39,"[":40,"]":41,"+":42,"-":43,"*":44,"/":45,"^":46,"<=":47,">=":48,"<":49,">":50,"==":51,"IS":52,"IN":53,"AND":54,"OR":55,"NOT":56,"INC":57,"DEC":58,"RETURN":59,"NONE":60,"STRING":61,"NUMBER":62,"exprs":63,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:";",8:"DEF",9:"NAME",10:"(",12:")",15:",",19:"{",22:"}",24:"VAR",25:"=",28:"ELSE",29:"ELSEIF",31:"IF",33:"WHILE",36:"operand",40:"[",41:"]",42:"+",43:"-",44:"*",45:"/",46:"^",47:"<=",48:">=",49:"<",50:">",51:"==",52:"IS",53:"IN",54:"AND",55:"OR",56:"NOT",57:"INC",58:"DEC",59:"RETURN",60:"NONE",61:"STRING",62:"NUMBER"},
productions_: [0,[3,2],[4,3],[4,2],[6,6],[14,3],[14,1],[11,0],[11,1],[16,3],[16,1],[18,0],[18,1],[13,4],[23,4],[20,0],[20,1],[26,3],[26,2],[27,0],[27,2],[27,6],[30,6],[32,6],[34,0],[34,2],[35,3],[35,1],[37,3],[37,1],[38,0],[38,1],[39,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,2],[17,2],[17,1],[17,2],[17,4],[17,1],[17,1],[17,1],[17,1],[17,1],[17,3],[17,1],[17,1],[63,3],[63,2],[21,0],[21,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,8:[1,4]},{1:[3]},{5:[1,5],6:6,8:[1,4]},{7:[1,7]},{9:[1,8]},{1:[2,1]},{7:[1,9]},{5:[2,3],8:[2,3]},{10:[1,10]},{5:[2,2],8:[2,2]},{9:[1,13],11:11,12:[2,7],14:12},{12:[1,14]},{12:[2,8],15:[1,15]},{12:[2,6],15:[2,6]},{13:16,19:[1,17]},{9:[1,18]},{7:[2,4],12:[2,4],15:[2,4],41:[2,4],42:[2,4],43:[2,4],44:[2,4],45:[2,4],46:[2,4],47:[2,4],48:[2,4],49:[2,4],50:[2,4],51:[2,4],52:[2,4],53:[2,4],54:[2,4],55:[2,4],57:[2,4],58:[2,4]},{8:[2,15],9:[2,15],10:[2,15],20:19,22:[2,15],23:21,24:[1,22],26:20,31:[2,15],33:[2,15],40:[2,15],43:[2,15],56:[2,15],59:[2,15],60:[2,15],61:[2,15],62:[2,15]},{12:[2,5],15:[2,5]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:25,21:23,22:[2,64],30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34],63:24},{8:[2,16],9:[2,16],10:[2,16],22:[2,16],23:41,24:[1,22],31:[2,16],33:[2,16],40:[2,16],43:[2,16],56:[2,16],59:[2,16],60:[2,16],61:[2,16],62:[2,16]},{7:[1,42]},{9:[1,43]},{22:[1,44]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:45,22:[2,65],30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{7:[1,46],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[1,61],58:[1,62]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:63,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:64,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{7:[2,51],10:[1,65],12:[2,51],15:[2,51],41:[2,51],42:[2,51],43:[2,51],44:[2,51],45:[2,51],46:[2,51],47:[2,51],48:[2,51],49:[2,51],50:[2,51],51:[2,51],52:[2,51],53:[2,51],54:[2,51],55:[2,51],57:[2,51],58:[2,51]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:66,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{7:[2,54],12:[2,54],15:[2,54],41:[2,54],42:[2,54],43:[2,54],44:[2,54],45:[2,54],46:[2,54],47:[2,54],48:[2,54],49:[2,54],50:[2,54],51:[2,54],52:[2,54],53:[2,54],54:[2,54],55:[2,54],57:[2,54],58:[2,54]},{7:[2,55],12:[2,55],15:[2,55],41:[2,55],42:[2,55],43:[2,55],44:[2,55],45:[2,55],46:[2,55],47:[2,55],48:[2,55],49:[2,55],50:[2,55],51:[2,55],52:[2,55],53:[2,55],54:[2,55],55:[2,55],57:[2,55],58:[2,55]},{7:[2,56],12:[2,56],15:[2,56],41:[2,56],42:[2,56],43:[2,56],44:[2,56],45:[2,56],46:[2,56],47:[2,56],48:[2,56],49:[2,56],50:[2,56],51:[2,56],52:[2,56],53:[2,56],54:[2,56],55:[2,56],57:[2,56],58:[2,56]},{7:[2,57],12:[2,57],15:[2,57],41:[2,57],42:[2,57],43:[2,57],44:[2,57],45:[2,57],46:[2,57],47:[2,57],48:[2,57],49:[2,57],50:[2,57],51:[2,57],52:[2,57],53:[2,57],54:[2,57],55:[2,57],57:[2,57],58:[2,57]},{7:[2,58],12:[2,58],15:[2,58],41:[2,58],42:[2,58],43:[2,58],44:[2,58],45:[2,58],46:[2,58],47:[2,58],48:[2,58],49:[2,58],50:[2,58],51:[2,58],52:[2,58],53:[2,58],54:[2,58],55:[2,58],57:[2,58],58:[2,58]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:67,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{7:[2,60],12:[2,60],15:[2,60],41:[2,60],42:[2,60],43:[2,60],44:[2,60],45:[2,60],46:[2,60],47:[2,60],48:[2,60],49:[2,60],50:[2,60],51:[2,60],52:[2,60],53:[2,60],54:[2,60],55:[2,60],57:[2,60],58:[2,60]},{7:[2,61],12:[2,61],15:[2,61],41:[2,61],42:[2,61],43:[2,61],44:[2,61],45:[2,61],46:[2,61],47:[2,61],48:[2,61],49:[2,61],50:[2,61],51:[2,61],52:[2,61],53:[2,61],54:[2,61],55:[2,61],57:[2,61],58:[2,61]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:70,30:36,31:[1,39],32:37,33:[1,40],37:69,38:68,39:30,40:[1,38],41:[2,30],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{10:[1,71]},{10:[1,72]},{7:[1,73]},{8:[2,18],9:[2,18],10:[2,18],22:[2,18],24:[2,18],31:[2,18],33:[2,18],40:[2,18],43:[2,18],56:[2,18],59:[2,18],60:[2,18],61:[2,18],62:[2,18]},{25:[1,74]},{7:[2,13],12:[2,13],15:[2,13],28:[2,13],29:[2,13],41:[2,13],42:[2,13],43:[2,13],44:[2,13],45:[2,13],46:[2,13],47:[2,13],48:[2,13],49:[2,13],50:[2,13],51:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],57:[2,13],58:[2,13]},{7:[1,75],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[1,61],58:[1,62]},{8:[2,63],9:[2,63],10:[2,63],22:[2,63],31:[2,63],33:[2,63],40:[2,63],43:[2,63],56:[2,63],59:[2,63],60:[2,63],61:[2,63],62:[2,63]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:76,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:77,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:78,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:79,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:80,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:81,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:82,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:83,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:84,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:85,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:86,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:87,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:88,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:89,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{7:[2,49],12:[2,49],15:[2,49],41:[2,49],42:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49],49:[2,49],50:[2,49],51:[2,49],52:[2,49],53:[2,49],54:[2,49],55:[2,49],57:[2,49],58:[2,49]},{7:[2,50],12:[2,50],15:[2,50],41:[2,50],42:[2,50],43:[2,50],44:[2,50],45:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50],50:[2,50],51:[2,50],52:[2,50],53:[2,50],54:[2,50],55:[2,50],57:[2,50],58:[2,50]},{7:[2,38],12:[2,38],15:[2,38],41:[2,38],42:[2,38],43:[2,38],44:[2,38],45:[2,38],46:[2,38],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[2,38],58:[2,38]},{7:[2,48],12:[2,48],15:[2,48],41:[2,48],42:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48],49:[2,48],50:[2,48],51:[2,48],52:[2,48],53:[2,48],54:[1,59],55:[1,60],57:[2,48],58:[2,48]},{6:31,8:[1,4],9:[1,28],10:[1,35],12:[2,11],16:91,17:92,18:90,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{7:[2,52],12:[2,52],15:[2,52],41:[2,52],42:[2,52],43:[2,52],44:[2,52],45:[2,52],46:[2,52],47:[2,52],48:[2,52],49:[2,52],50:[2,52],51:[2,52],52:[2,52],53:[2,52],54:[2,52],55:[2,52],57:[2,52],58:[2,52]},{12:[1,93],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[1,61],58:[1,62]},{41:[1,94]},{15:[1,95],41:[2,31]},{15:[2,29],41:[2,29],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[1,61],58:[1,62]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:96,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:97,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{8:[2,17],9:[2,17],10:[2,17],22:[2,17],24:[2,17],31:[2,17],33:[2,17],40:[2,17],43:[2,17],56:[2,17],59:[2,17],60:[2,17],61:[2,17],62:[2,17]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:98,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{8:[2,62],9:[2,62],10:[2,62],22:[2,62],31:[2,62],33:[2,62],40:[2,62],43:[2,62],56:[2,62],59:[2,62],60:[2,62],61:[2,62],62:[2,62]},{7:[2,33],12:[2,33],15:[2,33],41:[2,33],42:[2,33],43:[2,33],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[2,33],58:[2,33]},{7:[2,34],12:[2,34],15:[2,34],41:[2,34],42:[2,34],43:[2,34],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[2,34],58:[2,34]},{7:[2,35],12:[2,35],15:[2,35],41:[2,35],42:[2,35],43:[2,35],44:[2,35],45:[2,35],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[2,35],58:[2,35]},{7:[2,36],12:[2,36],15:[2,36],41:[2,36],42:[2,36],43:[2,36],44:[2,36],45:[2,36],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[2,36],58:[2,36]},{7:[2,37],12:[2,37],15:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[2,37],45:[2,37],46:[2,37],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[2,37],58:[2,37]},{7:[2,39],12:[2,39],15:[2,39],41:[2,39],42:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39],49:[2,39],50:[2,39],51:[2,39],52:[2,39],53:[2,39],54:[1,59],55:[1,60],57:[2,39],58:[2,39]},{7:[2,40],12:[2,40],15:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],49:[2,40],50:[2,40],51:[2,40],52:[2,40],53:[2,40],54:[1,59],55:[1,60],57:[2,40],58:[2,40]},{7:[2,41],12:[2,41],15:[2,41],41:[2,41],42:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],48:[2,41],49:[2,41],50:[2,41],51:[2,41],52:[2,41],53:[2,41],54:[1,59],55:[1,60],57:[2,41],58:[2,41]},{7:[2,42],12:[2,42],15:[2,42],41:[2,42],42:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42],49:[2,42],50:[2,42],51:[2,42],52:[2,42],53:[2,42],54:[1,59],55:[1,60],57:[2,42],58:[2,42]},{7:[2,43],12:[2,43],15:[2,43],41:[2,43],42:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],48:[2,43],49:[2,43],50:[2,43],51:[2,43],52:[2,43],53:[2,43],54:[1,59],55:[1,60],57:[2,43],58:[2,43]},{7:[2,44],12:[2,44],15:[2,44],41:[2,44],42:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44],49:[2,44],50:[2,44],51:[2,44],52:[2,44],53:[2,44],54:[1,59],55:[1,60],57:[2,44],58:[2,44]},{7:[2,45],12:[2,45],15:[2,45],41:[2,45],42:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45],49:[2,45],50:[2,45],51:[2,45],52:[2,45],53:[2,45],54:[1,59],55:[1,60],57:[2,45],58:[2,45]},{7:[2,46],12:[2,46],15:[2,46],41:[2,46],42:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46],49:[2,46],50:[2,46],51:[2,46],52:[2,46],53:[2,46],54:[2,46],55:[2,46],57:[2,46],58:[2,46]},{7:[2,47],12:[2,47],15:[2,47],41:[2,47],42:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47],49:[2,47],50:[2,47],51:[2,47],52:[2,47],53:[2,47],54:[1,59],55:[2,47],57:[2,47],58:[2,47]},{12:[1,99]},{12:[2,12],15:[1,100]},{12:[2,10],15:[2,10],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[1,61],58:[1,62]},{7:[2,59],12:[2,59],15:[2,59],41:[2,59],42:[2,59],43:[2,59],44:[2,59],45:[2,59],46:[2,59],47:[2,59],48:[2,59],49:[2,59],50:[2,59],51:[2,59],52:[2,59],53:[2,59],54:[2,59],55:[2,59],57:[2,59],58:[2,59]},{7:[2,32],12:[2,32],15:[2,32],41:[2,32],42:[2,32],43:[2,32],44:[2,32],45:[2,32],46:[2,32],47:[2,32],48:[2,32],49:[2,32],50:[2,32],51:[2,32],52:[2,32],53:[2,32],54:[2,32],55:[2,32],57:[2,32],58:[2,32]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:101,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{12:[1,102],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[1,61],58:[1,62]},{12:[1,103],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[1,61],58:[1,62]},{7:[2,14],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[1,61],58:[1,62]},{7:[2,53],12:[2,53],15:[2,53],41:[2,53],42:[2,53],43:[2,53],44:[2,53],45:[2,53],46:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],51:[2,53],52:[2,53],53:[2,53],54:[2,53],55:[2,53],57:[2,53],58:[2,53]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:104,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{15:[2,28],41:[2,28],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[1,61],58:[1,62]},{13:105,19:[1,17]},{13:106,19:[1,17]},{12:[2,9],15:[2,9],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[1,61],58:[1,62]},{7:[2,19],12:[2,19],15:[2,19],27:107,28:[1,108],29:[1,109],41:[2,19],42:[2,19],43:[2,19],44:[2,19],45:[2,19],46:[2,19],47:[2,19],48:[2,19],49:[2,19],50:[2,19],51:[2,19],52:[2,19],53:[2,19],54:[2,19],55:[2,19],57:[2,19],58:[2,19]},{7:[2,24],12:[2,24],15:[2,24],28:[1,111],34:110,41:[2,24],42:[2,24],43:[2,24],44:[2,24],45:[2,24],46:[2,24],47:[2,24],48:[2,24],49:[2,24],50:[2,24],51:[2,24],52:[2,24],53:[2,24],54:[2,24],55:[2,24],57:[2,24],58:[2,24]},{7:[2,22],12:[2,22],15:[2,22],41:[2,22],42:[2,22],43:[2,22],44:[2,22],45:[2,22],46:[2,22],47:[2,22],48:[2,22],49:[2,22],50:[2,22],51:[2,22],52:[2,22],53:[2,22],54:[2,22],55:[2,22],57:[2,22],58:[2,22]},{13:112,19:[1,17]},{10:[1,113]},{7:[2,23],12:[2,23],15:[2,23],41:[2,23],42:[2,23],43:[2,23],44:[2,23],45:[2,23],46:[2,23],47:[2,23],48:[2,23],49:[2,23],50:[2,23],51:[2,23],52:[2,23],53:[2,23],54:[2,23],55:[2,23],57:[2,23],58:[2,23]},{13:114,19:[1,17]},{7:[2,20],12:[2,20],15:[2,20],41:[2,20],42:[2,20],43:[2,20],44:[2,20],45:[2,20],46:[2,20],47:[2,20],48:[2,20],49:[2,20],50:[2,20],51:[2,20],52:[2,20],53:[2,20],54:[2,20],55:[2,20],57:[2,20],58:[2,20]},{6:31,8:[1,4],9:[1,28],10:[1,35],17:115,30:36,31:[1,39],32:37,33:[1,40],39:30,40:[1,38],43:[1,26],56:[1,27],59:[1,29],60:[1,32],61:[1,33],62:[1,34]},{7:[2,25],12:[2,25],15:[2,25],41:[2,25],42:[2,25],43:[2,25],44:[2,25],45:[2,25],46:[2,25],47:[2,25],48:[2,25],49:[2,25],50:[2,25],51:[2,25],52:[2,25],53:[2,25],54:[2,25],55:[2,25],57:[2,25],58:[2,25]},{12:[1,116],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,51],47:[1,52],48:[1,53],49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,60],57:[1,61],58:[1,62]},{13:117,19:[1,17]},{7:[2,19],12:[2,19],15:[2,19],27:118,28:[1,108],29:[1,109],41:[2,19],42:[2,19],43:[2,19],44:[2,19],45:[2,19],46:[2,19],47:[2,19],48:[2,19],49:[2,19],50:[2,19],51:[2,19],52:[2,19],53:[2,19],54:[2,19],55:[2,19],57:[2,19],58:[2,19]},{7:[2,21],12:[2,21],15:[2,21],41:[2,21],42:[2,21],43:[2,21],44:[2,21],45:[2,21],46:[2,21],47:[2,21],48:[2,21],49:[2,21],50:[2,21],51:[2,21],52:[2,21],53:[2,21],54:[2,21],55:[2,21],57:[2,21],58:[2,21]}],
defaultActions: {5:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return false;
break;
case 1:return false;
break;
case 2:return "DEF";
break;
case 3:return "WHILE";
break;
case 4:return "IF";
break;
case 5:return "ELSEIF";
break;
case 6:return "ELSE";
break;
case 7:return "AND";
break;
case 8:return "OR";
break;
case 9:return "NOT";
break;
case 10:return "TRUE";
break;
case 11:return "FALSE";
break;
case 12:return "RETURN";
break;
case 13:return "VAR";
break;
case 14:return "[";
break;
case 15:return "]";
break;
case 16:return "(";
break;
case 17:return ")";
break;
case 18:return "{";
break;
case 19:return "}";
break;
case 20:return "NONE";
break;
case 21:return "IN";
break;
case 22:return "IS";
break;
case 23:return "==";
break;
case 24:return "=";
break;
case 25:return 46;
break;
case 26:return 44;
break;
case 27:return 45;
break;
case 28:return 57;
break;
case 29:return 58;
break;
case 30:return 43;
break;
case 31:return 42;
break;
case 32:return ",";
break;
case 33:return ":";
break;
case 34:return ";";
break;
case 35:return "<=";
break;
case 36:return "<=";
break;
case 37:return "<=";
break;
case 38:return "<=";
break;
case 39:return "STRING";
break;
case 40:return "NUMBER";
break;
case 41:return "NAME";
break;
case 42:return 5;
break;
}
},
rules: [/^(?:^#.*)/,/^(?:\s)/,/^(?:def\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else if\b)/,/^(?:else\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:var\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:None\b)/,/^(?:in\b)/,/^(?:is\b)/,/^(?:==)/,/^(?:=)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[A-Za-z]([A-Za-z0-9])*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = kaladin;
exports.Parser = kaladin.Parser;
exports.parse = function () { return kaladin.parse.apply(kaladin, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}