/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var kaladin = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"program":4,"EOF":5,"op":6,"*":7,"+":8,"-":9,"^":10,"/":11,"COMP":12,"function":13,";":14,"DEF":15,"NAME":16,"(":17,"optargs":18,")":19,"body":20,",":21,"args":22,"expr":23,"{":24,"exprs":25,"}":26,"decl":27,"=":28,"cond":29,"|":30,"&":31,"!":32,"ifrest":33,"ELSE":34,"ELSEIF":35,"ifst":36,"IF":37,"whilest":38,"WHILE":39,"NONE":40,"RETURN":41,"DEC":42,"INC":43,"NUMBER":44,"STRING":45,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"*",8:"+",9:"-",10:"^",11:"/",12:"COMP",14:";",15:"DEF",16:"NAME",17:"(",19:")",21:",",24:"{",26:"}",28:"=",30:"|",31:"&",32:"!",34:"ELSE",35:"ELSEIF",37:"IF",39:"WHILE",40:"NONE",41:"RETURN",42:"DEC",43:"INC",44:"NUMBER",45:"STRING"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[4,3],[4,2],[13,6],[18,0],[18,3],[18,1],[22,0],[22,3],[22,1],[20,3],[27,3],[29,1],[29,3],[29,3],[29,2],[29,3],[33,0],[33,2],[33,6],[36,6],[38,5],[23,1],[23,2],[23,4],[23,4],[23,2],[23,5],[23,1],[23,1],[23,1],[23,1],[23,1],[23,4],[25,3],[25,3],[25,2],[25,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,13:3,15:[1,4]},{1:[3]},{5:[1,5],13:6,15:[1,4]},{14:[1,7]},{16:[1,8]},{1:[2,1]},{14:[1,9]},{5:[2,9],15:[2,9]},{17:[1,10]},{5:[2,8],15:[2,8]},{16:[1,12],18:11,19:[2,11],21:[2,11]},{19:[1,13],21:[1,14]},{19:[2,13],21:[2,13]},{20:15,24:[1,16]},{16:[1,17]},{14:[2,10]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,27],17:[1,23],23:19,25:18,27:20,36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{19:[2,12],21:[2,12]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,27],17:[1,23],23:40,26:[1,38],27:39,36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{14:[1,41]},{14:[1,42]},{7:[2,29],8:[2,29],9:[2,29],10:[2,29],11:[2,29],12:[2,29],14:[2,29],19:[2,29],21:[2,29],30:[2,29],31:[2,29],42:[2,29],43:[2,29]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:43,36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:45,36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:46,36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{7:[2,35],8:[2,35],9:[2,35],10:[2,35],11:[2,35],12:[2,35],14:[2,35],19:[2,35],21:[2,35],30:[2,35],31:[2,35],42:[2,35],43:[2,35]},{7:[2,36],8:[2,36],9:[2,36],10:[2,36],11:[2,36],12:[2,36],14:[2,36],19:[2,36],21:[2,36],30:[2,36],31:[2,36],42:[2,36],43:[2,36]},{14:[2,37],17:[1,47],28:[1,48]},{7:[2,38],8:[2,38],9:[2,38],10:[2,38],11:[2,38],12:[2,38],14:[2,38],19:[2,38],21:[2,38],30:[2,38],31:[2,38],42:[2,38],43:[2,38]},{7:[2,39],8:[2,39],9:[2,39],10:[2,39],11:[2,39],12:[2,39],14:[2,39],19:[2,39],21:[2,39],30:[2,39],31:[2,39],42:[2,39],43:[2,39]},{7:[2,2],8:[2,2],9:[2,2],10:[2,2],11:[2,2],12:[2,2],16:[2,2],17:[2,2],37:[2,2],39:[2,2],40:[2,2],41:[2,2],44:[2,2],45:[2,2]},{7:[2,3],8:[2,3],9:[2,3],10:[2,3],11:[2,3],12:[2,3],16:[2,3],17:[2,3],37:[2,3],39:[2,3],40:[2,3],41:[2,3],44:[2,3],45:[2,3]},{7:[2,4],8:[2,4],9:[2,4],10:[2,4],11:[2,4],12:[2,4],16:[2,4],17:[2,4],37:[2,4],39:[2,4],40:[2,4],41:[2,4],44:[2,4],45:[2,4]},{7:[2,5],8:[2,5],9:[2,5],10:[2,5],11:[2,5],12:[2,5],16:[2,5],17:[2,5],37:[2,5],39:[2,5],40:[2,5],41:[2,5],44:[2,5],45:[2,5]},{7:[2,6],8:[2,6],9:[2,6],10:[2,6],11:[2,6],12:[2,6],16:[2,6],17:[2,6],37:[2,6],39:[2,6],40:[2,6],41:[2,6],44:[2,6],45:[2,6]},{7:[2,7],8:[2,7],9:[2,7],10:[2,7],11:[2,7],12:[2,7],16:[2,7],17:[2,7],37:[2,7],39:[2,7],40:[2,7],41:[2,7],44:[2,7],45:[2,7]},{17:[1,49]},{17:[1,50]},{7:[2,17],8:[2,17],9:[2,17],10:[2,17],11:[2,17],12:[2,17],14:[2,17],19:[2,17],21:[2,17],30:[2,17],31:[2,17],34:[2,17],35:[2,17],42:[2,17],43:[2,17]},{14:[1,51]},{14:[1,52]},{7:[2,43],8:[2,43],9:[2,43],10:[2,43],11:[2,43],12:[2,43],16:[2,43],17:[2,43],26:[2,43],37:[2,43],39:[2,43],40:[2,43],41:[2,43],44:[2,43],45:[2,43]},{7:[2,44],8:[2,44],9:[2,44],10:[2,44],11:[2,44],12:[2,44],16:[2,44],17:[2,44],26:[2,44],37:[2,44],39:[2,44],40:[2,44],41:[2,44],44:[2,44],45:[2,44]},{7:[2,30],8:[2,30],9:[2,30],10:[2,30],11:[2,30],12:[2,30],14:[2,30],19:[2,30],21:[2,30],30:[2,30],31:[2,30],42:[2,30],43:[2,30]},{7:[2,37],8:[2,37],9:[2,37],10:[2,37],11:[2,37],12:[2,37],14:[2,37],17:[1,47],19:[2,37],21:[2,37],30:[2,37],31:[2,37],42:[2,37],43:[2,37]},{6:55,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],42:[1,53],43:[1,54]},{7:[2,33],8:[2,33],9:[2,33],10:[2,33],11:[2,33],12:[2,33],14:[2,33],19:[2,33],21:[2,33],30:[2,33],31:[2,33],42:[2,33],43:[2,33]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],19:[2,14],21:[2,14],22:56,23:57,36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:58,36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:60,29:59,32:[1,61],36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:60,29:62,32:[1,61],36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{7:[2,41],8:[2,41],9:[2,41],10:[2,41],11:[2,41],12:[2,41],16:[2,41],17:[2,41],26:[2,41],37:[2,41],39:[2,41],40:[2,41],41:[2,41],44:[2,41],45:[2,41]},{7:[2,42],8:[2,42],9:[2,42],10:[2,42],11:[2,42],12:[2,42],16:[2,42],17:[2,42],26:[2,42],37:[2,42],39:[2,42],40:[2,42],41:[2,42],44:[2,42],45:[2,42]},{19:[1,63]},{19:[1,64]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:65,36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{19:[1,66],21:[1,67]},{19:[2,16],21:[2,16]},{14:[2,18]},{19:[1,68]},{12:[1,71],19:[2,19],30:[1,69],31:[1,70]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:60,29:72,32:[1,61],36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{19:[1,73]},{7:[2,31],8:[2,31],9:[2,31],10:[2,31],11:[2,31],12:[2,31],14:[2,31],19:[2,31],21:[2,31],30:[2,31],31:[2,31],42:[2,31],43:[2,31]},{7:[2,32],8:[2,32],9:[2,32],10:[2,32],11:[2,32],12:[2,32],14:[2,32],19:[2,32],21:[2,32],30:[2,32],31:[2,32],42:[2,32],43:[2,32]},{19:[1,74]},{7:[2,40],8:[2,40],9:[2,40],10:[2,40],11:[2,40],12:[2,40],14:[2,40],19:[2,40],21:[2,40],30:[2,40],31:[2,40],42:[2,40],43:[2,40]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:75,36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{20:76,24:[1,16]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:60,29:77,32:[1,61],36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:60,29:78,32:[1,61],36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:79,36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{19:[2,22]},{20:80,24:[1,16]},{7:[2,34],8:[2,34],9:[2,34],10:[2,34],11:[2,34],12:[2,34],14:[2,34],19:[2,34],21:[2,34],30:[2,34],31:[2,34],42:[2,34],43:[2,34]},{19:[2,15],21:[2,15]},{7:[2,24],8:[2,24],9:[2,24],10:[2,24],11:[2,24],12:[2,24],14:[2,24],19:[2,24],21:[2,24],30:[2,24],31:[2,24],33:81,34:[1,82],35:[1,83],42:[2,24],43:[2,24]},{19:[2,20]},{19:[2,21]},{19:[2,23]},{7:[2,28],8:[2,28],9:[2,28],10:[2,28],11:[2,28],12:[2,28],14:[2,28],19:[2,28],21:[2,28],30:[2,28],31:[2,28],42:[2,28],43:[2,28]},{7:[2,27],8:[2,27],9:[2,27],10:[2,27],11:[2,27],12:[2,27],14:[2,27],19:[2,27],21:[2,27],30:[2,27],31:[2,27],42:[2,27],43:[2,27]},{20:84,24:[1,16]},{17:[1,85]},{7:[2,25],8:[2,25],9:[2,25],10:[2,25],11:[2,25],12:[2,25],14:[2,25],19:[2,25],21:[2,25],30:[2,25],31:[2,25],42:[2,25],43:[2,25]},{6:24,7:[1,30],8:[1,31],9:[1,32],10:[1,33],11:[1,34],12:[1,35],16:[1,44],17:[1,23],23:60,29:86,32:[1,61],36:25,37:[1,36],38:26,39:[1,37],40:[1,21],41:[1,22],44:[1,28],45:[1,29]},{19:[1,87]},{20:88,24:[1,16]},{7:[2,24],8:[2,24],9:[2,24],10:[2,24],11:[2,24],12:[2,24],14:[2,24],19:[2,24],21:[2,24],30:[2,24],31:[2,24],33:89,34:[1,82],35:[1,83],42:[2,24],43:[2,24]},{7:[2,26],8:[2,26],9:[2,26],10:[2,26],11:[2,26],12:[2,26],14:[2,26],19:[2,26],21:[2,26],30:[2,26],31:[2,26],42:[2,26],43:[2,26]}],
defaultActions: {5:[2,1],15:[2,10],58:[2,18],72:[2,22],77:[2,20],78:[2,21],79:[2,23]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return false;
break;
case 1:return false;
break;
case 2:return false;
break;
case 3:return false;
break;
case 4:return "DEF";
break;
case 5:return "WHILE";
break;
case 6:return "IF";
break;
case 7:return "ELSEIF";
break;
case 8:return "ELSE";
break;
case 9:return "&";
break;
case 10:return "|";
break;
case 11:return "!";
break;
case 12:return "TRUE";
break;
case 13:return "FALSE";
break;
case 14:return "RETURN";
break;
case 15:return "(";
break;
case 16:return ")";
break;
case 17:return "{";
break;
case 18:return "}";
break;
case 19:return "NONE";
break;
case 20:return "COMP";
break;
case 21:return "=";
break;
case 22:return 10;
break;
case 23:return 7;
break;
case 24:return 11;
break;
case 25:return 43;
break;
case 26:return 42;
break;
case 27:return 9;
break;
case 28:return 8;
break;
case 29:return ",";
break;
case 30:return ":";
break;
case 31:return ";";
break;
case 32:return "COMP";
break;
case 33:return "STRING";
break;
case 34:return "NUMBER";
break;
case 35:return "NAME";
break;
case 36:return 5;
break;
}
},
rules: [/^(?:^#.*)/,/^(?:\n)/,/^(?:\t)/,/^(?:\s)/,/^(?:def\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else if\b)/,/^(?:else\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:None\b)/,/^(?:==)/,/^(?:=)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:[\<\>][\=]?)/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[A-Za-z]([A-Za-z0-9])*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = kaladin;
exports.Parser = kaladin.Parser;
exports.parse = function () { return kaladin.parse.apply(kaladin, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}